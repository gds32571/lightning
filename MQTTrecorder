#!/usr/bin/env python3

from time import sleep,strftime
from datetime import datetime
import time

import paho.mqtt.publish as publish
import paho.mqtt.client as mqtt

import sqlite3

#conn = sqlite3.connect('./lightning.db')
#c = conn.cursor()

# Create table
#c.execute('''CREATE TABLE events
#             (date text, elapsed real, topic text, payload integer)''')

# Insert a row of data
#c.execute("INSERT INTO events VALUES ('2006-01-05 05:10:00',20,'test/ha32163/strike',52)")

# Save (commit) the changes
#conn.commit()

# We can also close the connection if we are done with it.
# Just be sure any changes have been committed or they will be lost.
#conn.close()

topic = "ha32163/lightning/#"
HAhost = "192.168.2.6"
print("starting")

start = time.time()
myElapsed = round(time.time(),3)

conn = sqlite3.connect('./lightning.db')
c = conn.cursor()
c.execute('select max(stormevent) from events')
row = (c.fetchone())

if row[0] is None: 
   eventnumber = 1
else:
   eventnumber = row[0] + 1

print("Recording event number: ",end='')
print (eventnumber) 

conn.close()

################################################
def on_connect(client, userdata, rc, flags):
    print("Connected with result code "+str(rc))
    client.subscribe(topic)
    print ("Subscribing to " + topic)
#    client.subscribe(topic2)
#    print ("Subscribing to " + topic2)


# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    global eventnumber
    global myElapsed

    myElapsed = round(time.time() - start,3) 
    
    print
    print(datetime.now())
    print(msg.topic+" "+str(msg.payload))
    myTopic = msg.topic
    myPayload = msg.payload.decode('utf-8')
    print("Payload= ", myPayload)

    if myTopic.count("/") == 2:
       conn = sqlite3.connect('./lightning.db')

       myDatetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
       myData = [(eventnumber,myDatetime,myElapsed,myTopic,myPayload)]
       print("My Data: ",end='')
       print(myData)
             
       c = conn.cursor()
       c.executemany('INSERT INTO events VALUES (?,?,?,?,?)', myData)
       conn.commit()
       conn.close()

######################################
client = mqtt.Client()
client.username_pw_set('hass', password='hass')
client.on_connect = on_connect
client.on_message = on_message
client.connect_async(HAhost, 1883, 60)

#   client.loop_forever()
client.loop_start()

# run for two hours
a = 240
while a > 0:
    sleep(30)
    myElapsed = round(time.time() - start,3) 
    print(myElapsed)
    a = a - 1
    



